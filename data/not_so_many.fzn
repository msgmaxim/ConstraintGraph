predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among(var int: n, array [int] of var int: x, set of int: v);
predicate array_bool_lq(array [int] of var bool: x, array [int] of var bool: y);
predicate array_bool_lt(array [int] of var bool: x, array [int] of var bool: y);
predicate array_int_lq(array [int] of var int: x, array [int] of var int: y);
predicate array_int_lt(array [int] of var int: x, array [int] of var int: y);
predicate array_set_partition(array [int] of var set of int: S, set of int: universe);
predicate at_least_int(int: n, array [int] of var int: x, int: v);
predicate at_most_int(int: n, array [int] of var int: x, int: v);
predicate bool_lin_ge(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_gt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_lt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_ne(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate count_reif(array [int] of var int: x, var int: y, var int: c, var bool: b);
predicate cumulatives(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate decreasing_bool(array [int] of var bool: x);
predicate decreasing_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate gecode_array_set_element_union(var set of int: x, array [int] of var set of int: y, var set of int: z);
predicate gecode_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: minIndex);
predicate gecode_circuit(int: offset, array [int] of var int: x);
predicate gecode_int_set_channel(array [int] of var int: x, int: xoff, array [int] of var set of int: y, int: yoff);
predicate gecode_inverse_set(array [int] of var set of int: f, array [int] of var set of int: invf, int: xoff, int: yoff);
predicate gecode_link_set_to_booleans(var set of int: s, array [int] of var bool: b, int: idx);
predicate gecode_member_bool_reif(array [int] of var bool: x, var bool: y, var bool: b);
predicate gecode_member_int_reif(array [int] of var int: x, var int: y, var bool: b);
predicate gecode_nooverlap(array [int] of var int: x, array [int] of var int: w, array [int] of var int: y, array [int] of var int: h);
predicate gecode_precede(array [int] of var int: x, int: s, int: t);
predicate gecode_precede_set(array [int] of var set of int: x, int: s, int: t);
predicate gecode_range(array [int] of var int: x, int: xoff, var set of int: s, var set of int: t);
predicate gecode_set_weights(array [int] of int: csi, array [int] of int: cs, var set of int: x, var int: y);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate increasing_bool(array [int] of var bool: x);
predicate increasing_int(array [int] of var int: x);
predicate inverse_offsets(array [int] of var int: f, int: foff, array [int] of var int: invf, int: invfoff);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..25] of var 1..5: a :: output_array([1..5, 1..5]);
var 1..5: aa :: output_var;
array [1..25] of var 1..5: b :: output_array([1..5, 1..5]);
var 1..5: bb :: output_var;
array [1..25] of var 1..5: c :: output_array([1..5, 1..5]);
var 1..5: cc :: output_var;
constraint all_different_int([a[1], b[1], c[1]]);
constraint all_different_int([a[2], b[2], c[2]]);
constraint all_different_int([a[3], b[3], c[3]]);
constraint all_different_int([a[4], b[4], c[4]]);
constraint all_different_int([a[5], b[5], c[5]]);
constraint all_different_int([a[6], b[6], c[6]]);
constraint all_different_int([a[7], b[7], c[7]]);
constraint all_different_int([a[8], b[8], c[8]]);
constraint all_different_int([a[9], b[9], c[9]]);
constraint all_different_int([a[10], b[10], c[10]]);
constraint all_different_int([a[11], b[11], c[11]]);
constraint all_different_int([a[12], b[12], c[12]]);
constraint all_different_int([a[13], b[13], c[13]]);
constraint all_different_int([a[14], b[14], c[14]]);
constraint all_different_int([a[15], b[15], c[15]]);
constraint all_different_int([a[16], b[16], c[16]]);
constraint all_different_int([a[17], b[17], c[17]]);
constraint all_different_int([a[18], b[18], c[18]]);
constraint all_different_int([a[19], b[19], c[19]]);
constraint all_different_int([a[20], b[20], c[20]]);
constraint all_different_int([a[21], b[21], c[21]]);
constraint all_different_int([a[22], b[22], c[22]]);
constraint all_different_int([a[23], b[23], c[23]]);
constraint all_different_int([a[24], b[24], c[24]]);
constraint all_different_int([a[25], b[25], c[25]]);
constraint int_ne(aa, a[1]);
constraint int_ne(aa, a[2]);
constraint int_ne(aa, a[3]);
constraint int_ne(aa, a[4]);
constraint int_ne(aa, a[5]);
constraint int_ne(aa, a[6]);
constraint int_ne(aa, a[7]);
constraint int_ne(aa, a[8]);
constraint int_ne(aa, a[9]);
constraint int_ne(aa, a[10]);
constraint int_ne(aa, a[11]);
constraint int_ne(aa, a[12]);
constraint int_ne(aa, a[13]);
constraint int_ne(aa, a[14]);
constraint int_ne(aa, a[15]);
constraint int_ne(aa, a[16]);
constraint int_ne(aa, a[17]);
constraint int_ne(aa, a[18]);
constraint int_ne(aa, a[19]);
constraint int_ne(aa, a[20]);
constraint int_ne(aa, a[21]);
constraint int_ne(aa, a[22]);
constraint int_ne(aa, a[23]);
constraint int_ne(aa, a[24]);
constraint int_ne(aa, a[25]);
constraint int_ne(bb, b[1]);
constraint int_ne(bb, b[2]);
constraint int_ne(bb, b[3]);
constraint int_ne(bb, b[4]);
constraint int_ne(bb, b[5]);
constraint int_ne(bb, b[6]);
constraint int_ne(bb, b[7]);
constraint int_ne(bb, b[8]);
constraint int_ne(bb, b[9]);
constraint int_ne(bb, b[10]);
constraint int_ne(bb, b[11]);
constraint int_ne(bb, b[12]);
constraint int_ne(bb, b[13]);
constraint int_ne(bb, b[14]);
constraint int_ne(bb, b[15]);
constraint int_ne(bb, b[16]);
constraint int_ne(bb, b[17]);
constraint int_ne(bb, b[18]);
constraint int_ne(bb, b[19]);
constraint int_ne(bb, b[20]);
constraint int_ne(bb, b[21]);
constraint int_ne(bb, b[22]);
constraint int_ne(bb, b[23]);
constraint int_ne(bb, b[24]);
constraint int_ne(bb, b[25]);
constraint int_ne(cc, c[1]);
constraint int_ne(cc, c[2]);
constraint int_ne(cc, c[3]);
constraint int_ne(cc, c[4]);
constraint int_ne(cc, c[5]);
constraint int_ne(cc, c[6]);
constraint int_ne(cc, c[7]);
constraint int_ne(cc, c[8]);
constraint int_ne(cc, c[9]);
constraint int_ne(cc, c[10]);
constraint int_ne(cc, c[11]);
constraint int_ne(cc, c[12]);
constraint int_ne(cc, c[13]);
constraint int_ne(cc, c[14]);
constraint int_ne(cc, c[15]);
constraint int_ne(cc, c[16]);
constraint int_ne(cc, c[17]);
constraint int_ne(cc, c[18]);
constraint int_ne(cc, c[19]);
constraint int_ne(cc, c[20]);
constraint int_ne(cc, c[21]);
constraint int_ne(cc, c[22]);
constraint int_ne(cc, c[23]);
constraint int_ne(cc, c[24]);
constraint int_ne(cc, c[25]);
solve satisfy;
