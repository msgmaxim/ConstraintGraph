predicate all_different_int(array [int] of var int: x);
predicate array_bool_even(array [int] of var bool: bs);
predicate array_bool_odd(array [int] of var bool: bs);
predicate bool_clause_reif(array [int] of var bool: pos, array [int] of var bool: neg, var bool: res);
predicate bool_conj_reif(array [int] of var bool: pos, array [int] of var bool: neg, var bool: res);
predicate cumulative_fd_g12_cpx(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
predicate int_in(var int: x, set of int: s);
predicate inverse_offsets(array [int] of var int: f, int: foff, array [int] of var int: invf, int: invfoff);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
var 0..48: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00019 :: is_defined_var :: var_is_introduced;
var 0..49: INT____00020 :: is_defined_var :: var_is_introduced;
var 1..49: INT____00021 :: is_defined_var :: var_is_introduced;
array [1..21] of var 0..49: differences :: output_array([1..21]) = [INT____00001, INT____00002, INT____00003, INT____00004, INT____00005, INT____00006, INT____00007, INT____00008, INT____00009, INT____00010, INT____00011, INT____00012, INT____00013, INT____00014, INT____00015, INT____00016, INT____00017, INT____00018, INT____00019, INT____00020, INT____00021];
array [1..7] of var 0..49: mark :: output_array([1..7]);
constraint all_different_int(differences);
constraint int_lin_eq([1, -1], [mark[1], 0], 0);
constraint int_lin_eq([-1, -1, 1], [INT____00001, mark[1], mark[2]], 0) :: defines_var(INT____00001);
constraint int_lin_eq([-1, -1, 1], [INT____00002, mark[1], mark[3]], 0) :: defines_var(INT____00002);
constraint int_lin_eq([-1, -1, 1], [INT____00003, mark[1], mark[4]], 0) :: defines_var(INT____00003);
constraint int_lin_eq([-1, -1, 1], [INT____00004, mark[1], mark[5]], 0) :: defines_var(INT____00004);
constraint int_lin_eq([-1, -1, 1], [INT____00005, mark[1], mark[6]], 0) :: defines_var(INT____00005);
constraint int_lin_eq([-1, -1, 1], [INT____00006, mark[1], mark[7]], 0) :: defines_var(INT____00006);
constraint int_lin_eq([-1, -1, 1], [INT____00007, mark[2], mark[3]], 0) :: defines_var(INT____00007);
constraint int_lin_eq([-1, -1, 1], [INT____00008, mark[2], mark[4]], 0) :: defines_var(INT____00008);
constraint int_lin_eq([-1, -1, 1], [INT____00009, mark[2], mark[5]], 0) :: defines_var(INT____00009);
constraint int_lin_eq([-1, -1, 1], [INT____00010, mark[2], mark[6]], 0) :: defines_var(INT____00010);
constraint int_lin_eq([-1, -1, 1], [INT____00011, mark[2], mark[7]], 0) :: defines_var(INT____00011);
constraint int_lin_eq([-1, -1, 1], [INT____00012, mark[3], mark[4]], 0) :: defines_var(INT____00012);
constraint int_lin_eq([-1, -1, 1], [INT____00013, mark[3], mark[5]], 0) :: defines_var(INT____00013);
constraint int_lin_eq([-1, -1, 1], [INT____00014, mark[3], mark[6]], 0) :: defines_var(INT____00014);
constraint int_lin_eq([-1, -1, 1], [INT____00015, mark[3], mark[7]], 0) :: defines_var(INT____00015);
constraint int_lin_eq([-1, -1, 1], [INT____00016, mark[4], mark[5]], 0) :: defines_var(INT____00016);
constraint int_lin_eq([-1, -1, 1], [INT____00017, mark[4], mark[6]], 0) :: defines_var(INT____00017);
constraint int_lin_eq([-1, -1, 1], [INT____00018, mark[4], mark[7]], 0) :: defines_var(INT____00018);
constraint int_lin_eq([-1, -1, 1], [INT____00019, mark[5], mark[6]], 0) :: defines_var(INT____00019);
constraint int_lin_eq([-1, -1, 1], [INT____00020, mark[5], mark[7]], 0) :: defines_var(INT____00020);
constraint int_lin_eq([-1, -1, 1], [INT____00021, mark[6], mark[7]], 0) :: defines_var(INT____00021);
constraint int_lin_le([1, -1], [INT____00001, INT____00021], -1);
constraint int_lin_le([1, -1], [mark[1], mark[2]], -1);
constraint int_lin_le([1, -1], [mark[2], mark[3]], -1);
constraint int_lin_le([1, -1], [mark[3], mark[4]], -1);
constraint int_lin_le([1, -1], [mark[4], mark[5]], -1);
constraint int_lin_le([1, -1], [mark[5], mark[6]], -1);
constraint int_lin_le([1, -1], [mark[6], mark[7]], -1);
solve  :: int_search(mark, input_order, indomain, complete) minimize mark[7];
